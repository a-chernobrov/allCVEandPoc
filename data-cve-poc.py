import os
import re
from collections import defaultdict
from database import create_database, save_vulnerability

def parse_cve_directory(directory):
    cve_entries = []
    for root, dirs, files in os.walk(directory):
        if "CVE-" in os.path.basename(root):
            cve_id_match = re.search(r'(CVE-\d{4}-\d+)', root)
            if cve_id_match:
                cve_id = cve_id_match.group(1)
                year = int(cve_id.split('-')[1])
                
                readme_path = os.path.join(root, 'README.md')
                description = ''
                if os.path.exists(readme_path):
                    try:
                        with open(readme_path, 'r', encoding='utf-8') as f:
                            description = f.readline().strip()
                    except Exception as e:
                        print(f"Ошибка при чтении файла {readme_path}: {e}")

                # Создаем ссылку на локальный README.md
                link = f"http://localhost:3000/{readme_path}"

                if all([cve_id, year, description]):
                    cve_entries.append({
                        'cveid': cve_id,
                        'year': year,
                        'description': description,
                        'links': [link]
                    })
    return cve_entries

if __name__ == "__main__":
    create_database()
    
    print("Начинается парсинг каталога 'data-cve-poc'...")
    cve_data_list = parse_cve_directory('data-cve-poc')
    
    if not cve_data_list:
        print("CVE данные не найдены.")
    else:
        print(f"Найдено {len(cve_data_list)} CVE записей. Начинается агрегация данных...")
        
        aggregated_data = defaultdict(lambda: {'year': None, 'descriptions': set(), 'links': set()})
        
        for cve_data in cve_data_list:
            cve_id = cve_data['cveid']
            aggregated_data[cve_id]['year'] = aggregated_data[cve_id]['year'] or cve_data['year']
            aggregated_data[cve_id]['descriptions'].add(cve_data['description'])
            if cve_data['links']:
                aggregated_data[cve_id]['links'].update(cve_data['links'])

        print("Агрегация завершена. Начинается импорт в БД...")
        for cve_id, data in aggregated_data.items():
            description = " | ".join(data['descriptions'])
            save_vulnerability(data['year'], cve_id, description, list(data['links']))
            print(f"Сохранена уязвимость: {cve_id} с {len(data['links'])} ссылками.")
            
        print("Импорт завершен.")
